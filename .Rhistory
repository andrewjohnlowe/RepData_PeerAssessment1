model1
printcp(model1)
source('~/R_data/testroot2.R')
plot(model2)
varImpPlot(model2)
MDSplot(model2, df.QG$numType)
source('~/R_data/testroot2.R')
varImpPlot(model2)
MDSplot(model2, df.QG$numType)
layout(matrix(c(1,2),nrow=1),
width=c(4,1))
par(mar=c(5,4,4,0)) #No margin on the right side
plot(model2, log="y")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(model2$err.rate),col=1:4,cex=0.8,fill=1:4)
?varImpPlot
source('~/R_data/testroot2.R')
source('~/R_data/testroot2.R')
source('~/R_data/testroot2.R')
source('~/R_data/testroot2.R')
?plotMDS
?MDSplot
MDSplot(model2, df.QG$numType,k=2)
MDSplot(model2, df.QG$numType,k=3)
MDSplot(model2, df.QG$numType,k=4)
MDSplot(model2, df.QG$numType,k=1)
MDSplot(model2, df.QG$numType,k=2)
MDSplot(model2, df.QG$numType,k=3)
MDSplot(model2, df.QG$numType,k=2)
varImpPlot(model2,type=1,scale=FALSE)
varImpPlot(model2,scale=FALSE)
?varImpPlot
varImpPlot(model2,type=1,scale=FALSE)
varImpPlot(model2,type=0,scale=FALSE)
varImpPlot(model2,type=2,scale=FALSE)
varImpPlot(model2,type=1,scale=FALSE)
varImpPlot(model2,type=2,scale=FALSE)
varImpPlot(model2,type=2,scale=FALSE)
varImpPlot(model2,type=2,scale=FALSE,pch=21)
varImpPlot(model2,type=2,scale=FALSE,pch=2)
varImpPlot(model2,type=2,scale=FALSE,pch=1)
varImpPlot(model2,type=2,scale=FALSE,pch=".")
varImpPlot(model2,type=2,scale=FALSE,pch="*")
varImpPlot(model2,type=2,scale=FALSE,col="red")
varImpPlot(model2,type=2,scale=FALSE,col="blue")
varImpPlot(model2,type=2,scale=FALSE)
?prp
cols <- c("red", "blue")[model1$frame$yval] # green if survived
prp(model1, tweak=1.4, extra=106, under=TRUE, branch=.5, faclen=0,
ge=" > ", eq=" ", split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue")[model1$frame$yval] # green if survived
prp(model1, tweak=1.4, extra=106, under=TRUE, branch=.5, faclen=0, split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue")[model1$frame$yval] # green if survived
prp(model1, tweak=1.4, extra=106, under=TRUE, branch=.5, faclen=0,
ge=" > ", eq=" ", split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue")[model1$frame$yval] # green if survived
prp(model1, tweak=1.4, extra=106, under=TRUE, branch=.5, faclen=0, split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue")[model1$frame$yval] # green if survived
prp(model1, tweak=1.4, extra=106, under=TRUE, branch=.5, faclen=0, split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
source('~/R_data/testroot2.R')
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(model2$err.rate),col=c("red","blue","black"),cex=0.8,fill=1:4)
source('~/R_data/testroot2.R')
source('~/R_data/testroot2.R')
egend("top", colnames(model2$err.rate),col=c(1,2,5),cex=0.8,fill=1:4)
legend("top", colnames(model2$err.rate),col=c(1,2,5),cex=0.8,fill=1:4)
legend("top", colnames(model2$err.rate),col=c(1,2,7),cex=0.8,fill=1:4)
?prp
prp(model1, extra=106, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
prp(model1, extra=100, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
?prp
dev.off()
prp(model1, extra=100, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
prp(model1, extra=102, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
prp(model1, extra=103, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
prp(model1, extra=104, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
prp(model1, extra=105, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
prp(model1, extra=100, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
dev.off()
?prp
prp(model1, extra=103, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
?prp
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
?prp
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0, varlen=25,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue")[model.scaled1$frame$yval]
prp(model.scaled1, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
head(df)
df <- toR(rt, varsList, nEntries=M)
df$Jet.Type <- as.factor(ifelse(df$QGtag2 == 21, 1, 2))
df$Jet.Type <- as.factor(ifelse(df$QGtag2 == 0, 3, df$Jet.Type))
levels(df$Jet.Type) <- c("Gluon", "Quark", "Undetermined")
names(df$Jet.Type) <- "Jet type"
df$Jet.Charge <- as.factor(ifelse(df$Jet.Type == "Gluon", 0, sign(df$QGtag2)))
names(df$Jet.Charge) <- "Jet charge"
df <- replace(df, is.na(df), NA)
cat("Data.frame dim: ", dim(df), "\n")
#df<-df[complete.cases(df),]
df <- df[sapply(df, function(x) length(unique(x))>1)]
#This variable appears to be either NA or 0:
df <- subset(df, select=-c(jStr_jetMiscJ_Cbar,jStr_jetMiscJ_numSubjets))
df <- subset(df, select=-c(QGtag, QGtag2, globalEntry, localEntry, idx))
head(df)
View(df)
model1 <- rpart(numType ~ ., method="class", data=df)
model1 <- rpart(Jet.Type ~ ., method="class", data=df)
prp(model1)
View(df)
?rpart
source('~/R_data/testroot2.R')
source('~/R_data/testroot2.R')
source('~/R_data/testroot3.R')
cols <- c("red", "blue","grey")[model1$frame$yval]
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue","grey2")[model1$frame$yval]
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue","grey1")[model1$frame$yval]
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue","grey12")[model1$frame$yval]
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue","grey1")[model1$frame$yval]
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue","green")[model1$frame$yval]
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
cols <- c("red", "blue","grey1")[model1$frame$yval]
prp(model1, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
fancyRpartPlot(model1,col=cols)
fancyRpartPlot(model1,fill=cols)
?prp
fancyRpartPlot(model1,box.col=cols)
fancyRpartPlot(model1,col=cols)
?prp
fancyRpartPlot(model1,border.col=cols)
fancyRpartPlot(model1,border.col=0,box.col=cols)
fancyRpartPlot(model1,border.col=0,box.col=2)
col
<-
c
(
"#FD8D3C"
,
"#FD8D3C"
,
"#FD8D3C"
,
"#BCBDDC"
,
"#FDD0A2"
,
"#FD8D3C"
,
"#BCBDDC"
)
cols<-c(
"#FD8D3C",
"#FD8D3C",
"#FD8D3C",
"#BCBDDC",
"#FDD0A2",
"#FD8D3C",
"#BCBDDC")
fancyRpartPlot(model1,border.col=0,box.col=cols)
?prp
prp(model1, type=2, extra=104, nn=TRUE, fallen.leaves=TRUE,
faclen=0, varlen=0, shadow.col="grey", branch.lty=3, box.col=cols)
cols <- c("red", "blue","grey")[model1$frame$yval]
prp(model1, type=2, extra=104, nn=TRUE, fallen.leaves=TRUE,
faclen=0, varlen=0, shadow.col="grey", branch.lty=3, box.col=cols)
cols <- c("red", "azure","grey")[model1$frame$yval]
prp(model1, type=2, extra=104, nn=TRUE, fallen.leaves=TRUE,
faclen=0, varlen=0, shadow.col="grey", branch.lty=3, box.col=cols)
cols <- c("red", "blue01","grey")[model1$frame$yval]
prp(model1, type=2, extra=104, nn=TRUE, fallen.leaves=TRUE,
faclen=0, varlen=0, shadow.col="grey", branch.lty=3, box.col=cols)
cols <- c("red", "slateblue","grey")[model1$frame$yval]
prp(model1, type=2, extra=104, nn=TRUE, fallen.leaves=TRUE,
faclen=0, varlen=0, shadow.col="grey", branch.lty=3, box.col=cols)
head(df.QG)
source('~/R_data/testroot3.R')
source('~/R_data/testroot3.R')
View(df.QG)
model1 <- rpart(numType ~ ., method="class", data=df.QG)
model1 <- rpart(numType ~ ., method="class", data=df.QG)
plot(model1)
prp(model1)
head(df.QG)
source('~/R_data/testroot3.R')
source('~/R_data/testroot3.R')
source('~/R_data/testroot3.R')
myplclust(hclustering, lab.col = c("red","blue","grey")unclass(df$Jet.Type))
myplclust(hclustering, lab.col = c("red","blue","grey")[unclass(df$Jet.Type)])
source('~/R_data/testroot3.R')
ggplot(df, aes(x=Jet.Type, fill=Jet.Type)) +
geom_histogram(aes(y=..density..),alpha=0.33,position='identity') +
stat_density(aes(colour=Jet.Type), geom="line",position="identity") +
ylab("Jets / binwidth") +
scale_fill_manual(values=c("red", "blue", "grey")) +
scale_colour_manual(values=c("red", "blue", "grey"))
ggplot(df, aes(x=jStr_jetMiscJ_numConstituents, fill=Jet.Type)) +
geom_histogram(aes(y=..density..),alpha=0.33,position='identity') +
stat_density(aes(colour=Jet.Type), geom="line",position="identity") +
ylab("Jets / binwidth") +
scale_fill_manual(values=c("red", "blue", "grey")) +
scale_colour_manual(values=c("red", "blue", "grey"))
print(model1)
head(df.QG)
table(df.QG)
table(df.QG,df.QG$numType)
table(df.QG[1:10],df.QG$numType)
sumary(df.QG,df.QG$numType)
summary(df.QG,df.QG$numType)
summary(df.QG)
View(df.QG)
model1 <- rpart(numType ~ ., method="class", data=df.QG)
print(model1)
prp(model1)
model1 <- rpart(numType ~ ., method="class", data=df.QG)
summary(df.QG)
model1 <- rpart(numType ~ ., method="class", data=df.QG)
source('~/R_data/testroot3.R')
prp(model1)
summary(df.QG)
prp(model.cp003)
prp(model.scaled1)
model1 <- rpart(numType ~ ., method="class", data=df.QG)
prp(model1)]
prp(model1)
summary(df.QG)
head(df.QG)
model <- rpart(numType ~ ., data=df.QG)
prp(model)
print(model)
model <- rpart(numType ~ ., data=df.QG,parms=list(split='gini'), cp =0.01)
print(model)
prp(model)
model <- rpart(numType ~ ., data=df.QG,parms=list(split='gini'), cp =0.001)
prp(model)
model <- rpart(numType ~ ., data=df.QG,parms=list(split='gini'), cp =0.003)
prp(model)
model <- rpart(numType ~ ., data=df.QG,parms=list(split='gini'), cp =0.0025)
prp(model)
fancyRpartPlot(model)
prp(model, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
model <- rpart(numType ~ ., data=df.QG, cp =0.003)
prp(model, extra=101, under=TRUE, branch=.5, faclen=0, varlen=50,
split.prefix="is ", split.suffix="?",
col=cols, border.col=cols, trace=1)
summary(df.QG)
source('~/R_data/testroot3.R')
print(g)
dev.off()
print(g)
dev.off()
source('~/R_data/testroot3.R')
?plot
plot(model2, log="y",col)
plot(model2, log="y")
source('~/R_data/testroot3.R')
source('~/R_data/testroot3.R')
ggplot(df, aes(x=jStr_fwmJi_B6, fill=Jet.Type)) +
geom_histogram(aes(y=..density..),alpha=0.33,position='identity') +
stat_density(aes(colour=Jet.Type), geom="line",position="identity") +
ylab("Jets / binwidth") +
scale_fill_manual(values=c("red", "blue", "grey")) +
scale_colour_manual(values=c("red", "blue", "grey"))
dev.off()
ggplot(df, aes(x=jStr_fwmJi_B6, fill=Jet.Type)) +
geom_histogram(aes(y=..density..),alpha=0.33,position='identity') +
stat_density(aes(colour=Jet.Type), geom="line",position="identity") +
ylab("Jets / binwidth") +
scale_fill_manual(values=c("red", "blue", "grey")) +
scale_colour_manual(values=c("red", "blue", "grey"))
ggplot(df, aes(x=jStr_fwmJi_Psi1, fill=Jet.Type)) +
geom_histogram(aes(y=..density..),alpha=0.33,position='identity') +
stat_density(aes(colour=Jet.Type), geom="line",position="identity") +
ylab("Jets / binwidth") +
scale_fill_manual(values=c("red", "blue", "grey")) +
scale_colour_manual(values=c("red", "blue", "grey"))
ggplot(df, aes(x=jStr_fwmJi_Psi1, fill=Jet.Type)) +
geom_histogram(aes(y=..density..),alpha=0.33,position='identity') +
stat_density(aes(colour=Jet.Type), geom="line",position="identity") +
ylab("Jets / binwidth") +
scale_fill_manual(values=c("red", "blue", "grey")) +
scale_colour_manual(values=c("red", "blue", "grey")) + xlim(0,1000)
ggplot(df, aes(x=jStr_fwmJi_Psi1, fill=Jet.Type)) +
geom_histogram(aes(y=..density..),alpha=0.33,position='identity') +
stat_density(aes(colour=Jet.Type), geom="line",position="identity") +
ylab("Jets / binwidth") +
scale_fill_manual(values=c("red", "blue", "grey")) +
scale_colour_manual(values=c("red", "blue", "grey")) + xlim(0,100)
ggplot(df, aes(x=jStr_fwmJi_Psi1, fill=Jet.Type)) +
geom_histogram(aes(y=..density..),alpha=0.33,position='identity') +
stat_density(aes(colour=Jet.Type), geom="line",position="identity") +
ylab("Jets / binwidth") +
scale_fill_manual(values=c("red", "blue", "grey")) +
scale_colour_manual(values=c("red", "blue", "grey")) + xlim(0,10)
source('~/R_data/testroot3.R')
source('~/R_data/testroot3.R')
names(df)
prp(model.cp003)
?qplot
?ggplot
as.POSIXct("0832", format = "%H:%M")
as.POSIXct("0832", format = "%H%M")
?scale_x_datetime
install.packages("scaled")
install.packages("scales")
?as.POSIXlt
activity
activity <- read.csv("activity.csv")
head(activity)
str(activity)
getwd()
setwd("~/Coursera/repdata/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
head(activity)
str(activity)
activity <- transform(activity, date = as.Date(date))
str(activity)
activity <- transform(activity, interval = as.POSIXlt(as.character(interval), format = "%H%M", tz = ""))
str(activity)
View(activity)
activity <- read.csv("activity.csv")
head(activity)
str(activity)
activity <- transform(activity, date = as.Date(date))
str(activity)
activity$time <- with(activity, as.POSIXlt(as.character(interval), format = "%H%M", tz = ""))
View(activity)
activity$time <- with(activity, as.POSIXlt(interval, format = "%H%M", tz = ""))
activity$time <- with(activity, as.POSIXlt(interval, format = "%H%M", tz = "", origin = "00:00"))
View(activity)
activity$time <- with(activity, as.POSIXlt(interval, format = "%H%M", tz = "", origin = "00:00:00"))
View(activity)
as.POSIXlt(0)
activity$time <- with(activity, as.POSIXlt(interval, format = "%H%M", tz = "", origin = "2012-10-01 00:00:00"))
View(activity)
activity$time <- with(activity, as.POSIXlt(interval, format = "%H%M", tz = "", origin = "2012-10-01 00:00"))
View(activity)
activity$time <- with(activity, as.POSIXlt(strftime(interval,"%H%M"), tz = "", origin = "2012-10-01 00:00"))
activity$time <- with(activity, as.POSIXlt(strftime(interval,"%H%M"), tz = ""))
strftime(0,"%Y-%m-%d %H:%M:%S")
strftime(0,"%Y-%m-%d %H:%M:%S",origin="1970-01-01")
strftime("00:00","%Y-%m-%d %H:%M:%S",origin="1970-01-01")
strftime("00:00","%H:%M",origin="1970-01-01")
strftime("00:01","%H:%M",origin="1970-01-01")
strftime("01:01","%H:%M",origin="1970-01-01")
strftime("01:01:01","%H:%M:%S",origin="1970-01-01")
activity$time <- with(activity, as.POSIXct(interval,"%H%M", tz = ""))
as.POSIXct("0000", format="%H%M")
as.POSIXct("0000", format="%H%M", tz="")
as.POSIXct("0000", format="%H%M", tz="f")
as.POSIXct("0000", format="%H%M", tz=" ")
as.POSIXct("0000", format="%H%M", tz=" ", origin="1970-01-01")
as.POSIXct("0002", format="%H%M", tz=" ", origin="1970-01-01")
as.POSIXct("0002", format="%H%M", tz=" ", origin="1970-01-01")
as.POSIXct("0002", format="%H%M", tz=" ", origin="1990-01-01")
as.POSIXct("2", format="%H%M", tz=" ", origin="1990-01-01")
as.POSIXct("2", format="%H%M", tz=" ", origin="1990-01-01")
formatC("2", width = 6, format = "d", flag = "0")
formatC("2", width = 6, format = "0", flag = "0")
formatC("2", width = 6, format = "d", flag = "0")
formatC("2", width = 6, format = "d", flag = "f")
anim <- 25499:25504
formatC(anim, width = 6, format = "d", flag = "0")
anim <- 25499:25504
formatC(0, width = 4, format = "d", flag = "0")
anim <- 25499:25504
formatC(234, width = 4, format = "d", flag = "0")
foo<-formatC(234, width = 4, format = "d", flag = "0")
foo
as.POSIXlt(foo, format = "%H%M", tz = ""))
as.POSIXlt(foo, format = "%H%M", tz = "")
as.POSIXlt(foo, format = "%H%M", tz = "")
as.POSIXlt(foo, format = "%H%M")
activity
View(activity)
activity <- read.csv("activity.csv")
head(activity)
str(activity)
activity <- transform(activity, date = as.Date(date))
str(activity)
# Firstly, transform the interval data (integers) into characters padded with leading zeros as needed:
activity <- transform(activity, formatC(interval, width = 4, format = "d", flag = "0"))
# Next, convert the character representation of the time into an actual time:
activity <- transform(activity, interval = as.POSIXlt(interval, format = "%H%M", origin="1970-01-01"))
View(activity)
activity <- read.csv("activity.csv")
head(activity)
str(activity)
activity <- transform(activity, date = as.Date(date))
str(activity)
# Firstly, transform the interval data (integers) into characters padded with leading zeros as needed:
activity <- transform(activity, formatC(interval, width = 4, format = "d", flag = "0"))
# Next, convert the character representation of the time into an actual time:
View(activity)
srt(activity)
str(activity)
activity <- transform(activity, formatC(interval, width = 4, format = "d", flag = "0"))
str(activity)
activity <- transform(activity, formatC(as.character(interval), width = 4, format = "d", flag = "0"))
str(activity)
foo<-formatC(234, width = 4, format = "d", flag = "0")
foo
activity <- read.csv("activity.csv")
head(activity)
str(activity)
activity <- transform(activity, date = as.Date(date))
str(activity)
str(activity)
activity <- transform(activity, formatC(interval, width = 4, format = "d", flag = "0"))
str(activity)
activity$timeStr <- formatC(interval, width = 4, format = "d", flag = "0")
activity$timeStr <- formatC(activity$interval, width = 4, format = "d", flag = "0")
str(activity)
activity <- transform(activity, timeString = as.POSIXlt(interval, format = "%H%M", origin="1970-01-01"))
str(activity)
View(activity)
activity <- transform(activity, timeString = as.POSIXlt(timeString, format = "%H%M", origin="1970-01-01"))
View(activity)
activity$timeStr <- formatC(activity$interval, width = 4, format = "d", flag = "0")
View(activity)
activity <- transform(activity, timeString = as.POSIXlt(timeStr, format = "%H%M", origin="1970-01-01"))
View(activity)
activity <- read.csv("activity.csv")
head(activity)
str(activity)
activity <- transform(activity, date = as.Date(date))
str(activity)
# Firstly, transform the interval data (integers) into characters padded with leading zeros as needed:
activity$timeString <- formatC(activity$interval, width = 4, format = "d", flag = "0")
# Next, convert the character representation of the time into an actual time:
activity <- transform(activity, timeString = as.POSIXlt(timeString, format = "%H%M", origin="1970-01-01"))
str(activity)
View(activity)
View(activity)
activity[complete.cases(activity),]
complete.cases(activity)
averageStepsPerInterval <- aggregate(steps ~ interval, activity, mean)
View(activity)
View(averageStepsPerInterval)
?scale_x_time
?scale_x_date
sprintf("%04d", activity$interval)
foo<-sprintf("%04d", activity$interval)
strptime(foo, format = "%H%M")
plot(averageStepsPerInterval$interval, averageStepsPerInterval$steps, type="l",
xlab="Interval",
ylab="Average number of steps",
main="Average number of steps taken versus 5-minute time interval")
strptime("0835", format = "%H%M")
?date_format
strptime("0835", format = "%H%M")
gc()
